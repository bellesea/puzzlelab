const playerUp    = 'u';
const playerDown  = 'd';
const playerLeft  = 'l';
const playerRight = 'r';
const playerDirs = [playerUp, playerDown, playerLeft, playerRight];
const laserHorizontal  = '|';
const laserVertical    = '_';
const laserUpToRight   = 'Q';
const laserDownToRight = 'W';
const laserUpToLeft    = 'E';
const laserDownToLeft  = 'R';

const laserDirs = Object.fromEntries([
  [[ 1,  1], laserUpToRight  ],
  [[-1,  1], laserDownToRight],
  [[ 1, -1], laserUpToLeft   ],
  [[-1, -1], laserDownToLeft ],
  [[-1,  0], laserHorizontal ],
  [[ 1,  0], laserHorizontal ],
  [[ 0, -1], laserVertical   ],
  [[ 0,  1], laserVertical   ],
]);

setLegend(
  [playerUp   , bitmap`
................
.......00.......
......0..0......
.....0....0.....
....0......0....
...0........0...
...0000..0000...
......0..0......
......0..0......
.....0....0.....
.....0....0.....
.....0....0.....
.....0....0.....
....0......0....
....00000000....
................`],
  [playerDown , bitmap`
................
....00000000....
....0......0....
.....0....0.....
.....0....0.....
.....0....0.....
.....0....0.....
......0..0......
......0..0......
...0000..0000...
...0........0...
....0......0....
.....0....0.....
......0..0......
.......00.......
................`],
  [playerRight, bitmap`
................
................
................
.........00.....
.00......0.0....
.0.0000..0..0...
.0.....000...0..
.0............0.
.0............0.
.0.....000...0..
.0.0000..0..0...
.00......0.0....
.........00.....
................
................
................`],
  [playerLeft , bitmap`
................
................
................
.....00.........
....0.0......00.
...0..0..0000.0.
..0...000.....0.
.0............0.
.0............0.
..0...000.....0.
...0..0..0000.0.
....0.0......00.
.....00.........
................
................
................`],
  [laserHorizontal , bitmap`
................
................
................
................
................
................
3333333333333333
3.3.3.3.3.3.3.3.
.3.3.3.3.3.3.3.3
3333333333333333
................
................
................
................
................
................`],
  [laserVertical   , bitmap`
......3.33......
......33.3......
......3.33......
......33.3......
......3.33......
......33.3......
......3.33......
......33.3......
......3.33......
......33.3......
......3.33......
......33.3......
......3.33......
......33.3......
......3.33......
......33.3......`],
  [laserUpToRight  , bitmap`......3.33......
......33.3......
......3.33......
......33.3......
......3.33......
......33.3......
......3.33333333
......33.3.33.33
......3.3.3..3..
......3333333333
................
................
................
................
................
................
`],
  [laserDownToRight, bitmap`
................
................
................
................
................
................
......3333333333
......3.3.3.3.3.
......33.3.3.3.3
......3.33333333
......33.3......
......3.33......
......33.3......
......3.33......
......33.3......
......3.33......`],
  [laserUpToLeft   , bitmap`......33.3......
......3.33......
......33.3......
......3.33......
......33.3......
......3.33......
33333333.3......
3.3.3.3.33......
.3.3.3.3.3......
3333333333......
................
................
................
................
................
................
`],
  [laserDownToLeft , bitmap`
................
................
................
................
................
................
3333333333......
.3.3.3.3.3......
3.3.3.3.33......
33333333.3......
......3.33......
......33.3......
......3.33......
......33.3......
......3.33......
......33.3......`],
);
setMap(map`
................
................
................
................
................
................
................
................
.......u........
................
................
................
................
................
................
................`);

const isLeftTurn = (a, b) => (a[0]*b[1] - a[1]*b[0]) > 0;
const player = () => getFirst(playerDirs.find(getFirst));

let lastDelta = [0, -1];
const push = (type, [x, y]) => {
  const p = player();
  
  // save where they are now so we can leave a trail
  const pos = [p.x, p.y];

  /* "unconventional guns" style movement
     (takes a turn to look in a new direction) */
  if (p.type == type) {
    p.x += x;
    p.y += y;
  } else {
    p.type = type;
  }

  /* leave a trail */
  const delta = [p.x - pos[0], p.y - pos[1]];
  if (delta+'' != '0,0') {
    const dir = [
      Math.sign(delta[0] + lastDelta[0]),
      Math.sign(delta[1] + lastDelta[1])
    ];
    if (!isLeftTurn(delta, lastDelta)) {
      dir[0] *= -1;
      dir[1] *= -1;
    }
    lastDelta = delta;
    if (dir != '0,0')
      addSprite(pos[0], pos[1], laserDirs[dir]);
  }
};

onInput(   'up', () => push(   playerUp, [ 0, -1]));
onInput( 'down', () => push( playerDown, [ 0,  1]));
onInput( 'left', () => push( playerLeft, [-1,  0]));
onInput('right', () => push(playerRight, [ 1,  0]));
