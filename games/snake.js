const apple = 'a';
const playerUp    = 'u';
const playerDown  = 'd';
const playerLeft  = 'l';
const playerRight = 'r';
const playerDirs = [playerUp, playerDown, playerLeft, playerRight];
const laserHorizontal  = '|';
const laserVertical    = '_';
const laserUpToRight   = 'Q';
const laserDownToRight = 'W';
const laserUpToLeft    = 'E';
const laserDownToLeft  = 'R';
const laserVariants = [
  laserHorizontal, laserVertical,
  laserUpToRight,  laserDownToRight,
  laserUpToLeft,   laserDownToLeft
];

const STATE = { PLAY: 0, DEAD: 1 };
let state = STATE.PLAY;

const laserDirs = {
  '1,1':   laserUpToRight  ,
  '-1,1':  laserDownToRight,
  '1,-1':  laserUpToLeft   ,
  '-1,-1': laserDownToLeft ,
  '-1,0':  laserHorizontal ,
  '1,0':   laserHorizontal ,
  '0,-1':  laserVertical   ,
  '0,1':   laserVertical   ,
};

setLegend(
  [apple, bitmap`
................
................
................
................
................
......4.........
.......4........
......3343......
.....333333.....
....33333233....
....33333223....
....33333233....
.....333333.....
.....333333.....
......3.33......
................`],
  [playerUp   , bitmap`
................
.......00.......
......0..0......
.....0....0.....
....0......0....
...0........0...
...0000..0000...
......0..0......
......0..0......
.....0....0.....
.....0....0.....
.....0....0.....
.....0....0.....
....0......0....
....00000000....
................`],
  [playerDown , bitmap`
................
....00000000....
....0......0....
.....0....0.....
.....0....0.....
.....0....0.....
.....0....0.....
......0..0......
......0..0......
...0000..0000...
...0........0...
....0......0....
.....0....0.....
......0..0......
.......00.......
................`],
  [playerRight, bitmap`
................
................
................
.........00.....
.00......0.0....
.0.0000..0..0...
.0.....000...0..
.0............0.
.0............0.
.0.....000...0..
.0.0000..0..0...
.00......0.0....
.........00.....
................
................
................`],
  [playerLeft , bitmap`
................
................
................
.....00.........
....0.0......00.
...0..0..0000.0.
..0...000.....0.
.0............0.
.0............0.
..0...000.....0.
...0..0..0000.0.
....0.0......00.
.....00.........
................
................
................`],
  [laserHorizontal , bitmap`
................
................
................
................
................
................
3333333333333333
3.3.3.3.3.3.3.3.
.3.3.3.3.3.3.3.3
3333333333333333
................
................
................
................
................
................`],
  [laserVertical   , bitmap`
......3.33......
......33.3......
......3.33......
......33.3......
......3.33......
......33.3......
......3.33......
......33.3......
......3.33......
......33.3......
......3.33......
......33.3......
......3.33......
......33.3......
......3.33......
......33.3......`],
  [laserUpToRight  , bitmap`......3.33......
......33.3......
......3.33......
......33.3......
......3.33......
......33.3......
......3.33333333
......33.3.33.33
......3.3.3..3..
......3333333333
................
................
................
................
................
................
`],
  [laserDownToRight, bitmap`
................
................
................
................
................
................
......3333333333
......3.3.3.3.3.
......33.3.3.3.3
......3.33333333
......33.3......
......3.33......
......33.3......
......3.33......
......33.3......
......3.33......`],
  [laserUpToLeft   , bitmap`......33.3......
......3.33......
......33.3......
......3.33......
......33.3......
......3.33......
33333333.3......
3.3.3.3.33......
.3.3.3.3.3......
3333333333......
................
................
................
................
................
................
`],
  [laserDownToLeft , bitmap`
................
................
................
................
................
................
3333333333......
.3.3.3.3.3......
3.3.3.3.33......
33333333.3......
......3.33......
......33.3......
......3.33......
......33.3......
......3.33......
......33.3......`],
);

let lastDelta, trail, grow;
const reset = () => {
  state = STATE.PLAY;
  
  setMap(map`
................
................
................
................
................
................
................
................
.......u........
................
................
................
................
................
................
................`);
  lastDelta = [0, -1];
  trail = [];
  grow = false;
}
reset();

const isLeftTurn = (a, b) => (a[0]*b[1] - a[1]*b[0]) > 0;
const player = () => getFirst(playerDirs.find(getFirst));

/* grow the snake !*/
const leaveTrail = (x, y, type) => {
  /* no crossing your own tail! */
  for (const t of getTile(x, y)) {
    if (laserVariants.includes(t.type)) {
      setMap(map`
................
................
................
................
..__WR__........
..QRQEQE........
..|E....__..._..
.......W__WRW_..
.......QE__EQE..
..........Q|....
.|.|............
.W|R............
................
................
................
................`)
      state = STATE.DEAD;
      return;
    }
  }

  /* out with the old */
  if (!grow) {
    let tip;
    if (tip = trail.shift()) {
      getTile(tip.x, tip.y)
        .find(x => laserVariants.includes(x.type))
        .remove();
    }
  }
  grow = false;

  /* in with the new */
  addSprite(x, y, type);
  trail.push({ x, y });
}

let ticks = 0;
const push = (type, [x, y]) => {
  if (state == STATE.DEAD) {
    /* when you're dead, tapping a key just restarts */
    reset();
    return;
  }

  /* maybe drop some apples */
  if (ticks++ % 10 == 0) {
    while (true) {
      const fx = Math.floor(Math.random() * 15);
      const fy = Math.floor(Math.random() * 15);
      if (getTile(fx, fy).length == 0) {
        addSprite(fx, fy, apple);
        break;
      }
    }
  }
  
  const p = player();
  
  // save where they are now so we can leave a trail
  const pos = [p.x, p.y];

  /* "unconventional guns" style movement
     (takes a turn to look in a new direction) */
  if (p.type == type) {
    p.x += x;
    p.y += y;
  } else {
    p.type = type;
  }

  /* omnomnom apple */
  for (const food of getTile(p.x, p.y)) {
    if (food.type == apple) {
      grow = true;
      food.remove();
    }
  }

  /* leave a trail */
  const delta = [p.x - pos[0], p.y - pos[1]];
  if (!(delta[0] == 0 && delta[1] == 0)) {
    const dir = [
      Math.sign(delta[0] + lastDelta[0]),
      Math.sign(delta[1] + lastDelta[1])
    ];
    if (!isLeftTurn(delta, lastDelta)) {
      dir[0] *= -1;
      dir[1] *= -1;
    }
    lastDelta = delta;
    if (dir != '0,0')
      leaveTrail(pos[0], pos[1], laserDirs[dir]);
  }
};

onInput(   'up', () => push(   playerUp, [ 0, -1]));
onInput( 'down', () => push( playerDown, [ 0,  1]));
onInput( 'left', () => push( playerLeft, [-1,  0]));
onInput('right', () => push(playerRight, [ 1,  0]));
